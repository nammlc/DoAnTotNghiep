@page
@using Microsoft.AspNetCore.Antiforgery
@inject IAntiforgery antiforgery
@{
    var token = antiforgery.GetAndStoreTokens(HttpContext).RequestToken;
}

@Html.AntiForgeryToken()
@model DoAnTotNghiep.Pages.MapModel
@{
    Layout = "_layout";
}

<style>
    .cafe-map {
        display: grid;
        grid-template-columns: repeat(4, 1fr);
        gap: 15px;
        justify-content: center;
        padding: 20px;
    }

    .table-map,
    .counter,
    .door {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        width: 100px;
        height: 100px;
        padding: 10px;
        border: 2px solid #ccc;
        border-radius: 8px;
        text-align: center;
        cursor: pointer;
        font-size: 14px;
        overflow: hidden;
    }

    .table-map {
        background-color: #ccc;
        /* B√†n ch∆∞a c√≥ ƒë∆°n h√†ng: m√†u x√°m */
    }

    .table-assigned {
        background-color: #4CAF50;
        /* B√†n c√≥ ƒë∆°n h√†ng: m√†u xanh */
        color: white;
    }

    .counter {
        background-color: #ffe5b4;
        grid-column: 1 / span 1;
        grid-row: 4;
        color: #333;
    }

    .door {
        background-color: #d1e7dd;
        grid-column: 2 / span 1;
        grid-row: 4;
        color: #333;
    }

    .icon {
        font-size: 24px;
    }
</style>

<div>
    <h2>B·∫£n ƒê·ªì Qu√°n Cafe</h2>

    <!-- B·∫£n ƒë·ªì qu√°n cafe v·ªõi c√°c b√†n, qu·∫ßy pha ch·∫ø v√† c·ª≠a ra v√†o -->
    <div class="cafe-map">
        @foreach (var banan in Model.BanAns)
        {
            if (banan.hoa_don_id != null)
            {
                <div class="table-map" id="table-@banan.id"
                    onclick="openTable('h√≥a ƒë∆°n ' + @banan.hoa_don_id + ' c·ªßa b√†n ' + @banan.id.ToString())"
                    style="background : #4CAF50 ;">
                    <div class="icon">‚òï</div>
                    <div>B√†n @(banan.id - 1)</div>
                    <div class="order-info" id="assigned-order-@banan.id">ƒê∆°n h√†ng @banan.hoa_don_id</div>
                    
                </div>
                @foreach (var hoadon in Model.HoaDons)
                    {
                        if (hoadon.ban_an_id == banan.id && hoadon.trang_thai != "ƒê√£ ho√†n th√†nh")
                        {
                            <div id="orderInfoModal"
                                style="display:none; position:fixed; top:50%; left:50%; transform:translate(-50%, -50%); background:white; padding:20px; border-radius:8px; box-shadow:0 4px 8px rgba(0, 0, 0, 0.2);">
                                <h3>Th√¥ng Tin ƒê∆°n H√†ng <span id="orderTableNumber"></span></h3>
                                <div id="orderDetails">
                                    <div>
                                        T·ªïng ƒë∆°n h√†ng : @hoadon.tong_tien.ToString("#,##0") VNƒê
                                    </div>
                                    <div>
                                        Danh s√°ch ƒë∆°n h√†ng :
                                    </div>
                                    <div>
                                        T√™n kh√°ch h√†ng : @hoadon.ten_ban
                                    </div>
                                    <div>
                                        Th·ªùi gian order : @hoadon.gio_vao
                                    </div>
                                </div>
                                <div style="margin-top: 10px;">
                                    <button onclick="closeOrderInfoModal()">ƒê√≥ng</button>
                                </div>
                                <div style="margin-top: 10px;">
                                    <button onclick="finishOrder()">Ho√†n th√†nh ƒë∆°n h√†ng</button>
                                </div>
                            </div>

                        }

                    }
            }
            else
            {
                <div class="table-map" id="table-@banan.id" onclick="openTable(@banan.id)" style="color : #000">
                    <div class="icon">‚òï</div>
                    <div>B√†n @(banan.id - 1)</div>
                    <div class="order-info" id="assigned-order-@banan.id">Ch∆∞a c√≥ ƒë∆°n h√†ng</div>
                </div>
            }
        }


        <!-- Qu·∫ßy pha ch·∫ø ·ªü g√≥c d∆∞·ªõi b√™n tr√°i -->
        <div class="counter">
            <div class="icon">üçπ</div>
            <div>Qu·∫ßy Pha Ch·∫ø</div>
        </div>

        <!-- C·ª≠a ra v√†o ngay c·∫°nh qu·∫ßy pha ch·∫ø -->
        <div class="door">
            <div class="icon">üö™</div>
            <div>C·ª≠a Ra V√†o</div>
        </div>
    </div>
</div>

<!-- Modal g√°n ƒë∆°n h√†ng v√†o b√†n -->
<div id="assignOrderModal"
    style="display:none; position:fixed; top:50%; left:50%; transform:translate(-50%, -50%); background:white; padding:20px; border-radius:8px; box-shadow:0 4px 8px rgba(0, 0, 0, 0.2);">
    <h3>G√°n ƒê∆°n H√†ng cho B√†n <span id="selectedTable"></span></h3>
    <select id="orderSelect">
        <option value="">Ch·ªçn ƒë∆°n h√†ng</option>
        @foreach (var hoadon in Model.HoaDons)
        {
            if (hoadon.trang_thai != "ƒê√£ ho√†n th√†nh" && hoadon.ban_an_id == null)
            {
                <option value="@hoadon.id">T√™n KH: @hoadon.ten_ban ; T·ªïng h√≥a ƒë∆°n: @hoadon.tong_tien.ToString("#,##0") VNƒê ;
                    Th·ªùi gian t·∫°o h√≥a ƒë∆°n : @hoadon.gio_vao </option>
            }
        }
    </select>
    <div style="margin-top: 10px;">
        <button onclick="assignOrder()">X√°c Nh·∫≠n</button>
        <button onclick="closeAssignOrderModal()">H·ªßy</button>
    </div>
</div>

<!-- Modal xem th√¥ng tin ƒë∆°n h√†ng -->
@* <div id="orderInfoModal"
    style="display:none; position:fixed; top:50%; left:50%; transform:translate(-50%, -50%); background:white; padding:20px; border-radius:8px; box-shadow:0 4px 8px rgba(0, 0, 0, 0.2);">
    <h3>Th√¥ng Tin ƒê∆°n H√†ng <span id="orderTableNumber"></span></h3>
    <div id="orderDetails">
        <div>
            T·ªïng ƒë∆°n h√†ng :
        </div>
        <div>
            Danh s√°ch ƒë∆°n h√†ng :
        </div>
        <div>
            T√™n kh√°ch h√†ng :
        </div>
        <div>
            Th·ªùi gian order :
        </div>
    </div>
    <div style="margin-top: 10px;">
        <button onclick="closeOrderInfoModal()">ƒê√≥ng</button>
    </div>
    <div style="margin-top: 10px;">
        <button onclick="finishOrder()">Ho√†n th√†nh ƒë∆°n h√†ng</button>
    </div>
</div> *@

<script>
    let selectedTableId;
    let orderData = {}; // L∆∞u tr·ªØ ƒë∆°n h√†ng theo b√†n

    // M·ªü modal g√°n ƒë∆°n h√†ng khi b√†n ch∆∞a c√≥ ƒë∆°n
    function openTable(tableNumber) {
        selectedTableId = tableNumber;
        console.log(selectedTableId);

        // Ki·ªÉm tra xem b√†n ƒë√£ c√≥ ƒë∆°n h√†ng ch∆∞a
        if (typeof selectedTableId === 'string') {
            // N·∫øu c√≥ ƒë∆°n, m·ªü modal xem chi ti·∫øt ƒë∆°n h√†ng
            console.log("click");
            openOrderInfoModal();
        } else {
            // N·∫øu ch∆∞a c√≥ ƒë∆°n, m·ªü modal g√°n ƒë∆°n h√†ng
            console.log("clickk");
            openAssignOrderModal();
        }
    }

    // M·ªü modal g√°n ƒë∆°n h√†ng
    function openAssignOrderModal() {
        document.getElementById("selectedTable").innerText = selectedTableId;
        document.getElementById("assignOrderModal").style.display = "block";
    }

    // ƒê√≥ng modal g√°n ƒë∆°n h√†ng
    function closeAssignOrderModal() {
        document.getElementById("assignOrderModal").style.display = "none";
        document.getElementById("orderSelect").value = ""; // Reset ch·ªçn ƒë∆°n h√†ng
    }

    // X√°c nh·∫≠n g√°n ƒë∆°n h√†ng v√†o b√†n
    function assignOrder() {
        let selectedOrder = document.getElementById("orderSelect").value;

        if (!selectedOrder) {
            alert("Vui l√≤ng ch·ªçn ƒë∆°n h√†ng.");
            return;
        }

        // L·∫•y token ch·ªëng CSRF
        const csrfToken = document.querySelector('input[name="__RequestVerificationToken"]').value;

        // G·ª≠i y√™u c·∫ßu AJAX ƒë·ªÉ g√°n ƒë∆°n h√†ng v√†o b√†n
        fetch(`/Map?handler=Table`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json", // ƒê·∫∑t lo·∫°i n·ªôi dung l√† JSON
                "XSRF-TOKEN": csrfToken // Th√™m token v√†o header
            },
            body: JSON.stringify({
                tableId: selectedTableId,
                orderId: selectedOrder
            })
        })
            .then(response => {
                // Ki·ªÉm tra ph·∫£n h·ªìi t·ª´ server
                if (response.ok) {
                    location.reload();
                } else {
                    alert("C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.");
                }
            })
            .catch(error => {
                console.error("L·ªói khi g√°n ƒë∆°n h√†ng:", error);
                alert("C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.");
            });
    }

    // Ho√†n th√†nh ƒë∆°n h√†ng
    function finishOrder() {
        let numberOrderId;
        let numberTableId;
        if (typeof selectedTableId === "string") {
            const numbers = selectedTableId.match(/\d+/g);

            numberOrderId = numbers[0];
            numberTableId = numbers[1];

            console.log(`H√≥a ƒë∆°n: ${numberOrderId}, B√†n: ${numberTableId}`);
        }
        const csrfToken = document.querySelector('input[name="__RequestVerificationToken"]').value;
        // G·ª≠i y√™u c·∫ßu AJAX ƒë·ªÉ ho√†n th√†nh ƒë∆°n h√†ng
        fetch(`/Map?handler=FinishOrder`, {
            method: "POST",
            headers: {
                "Content-Type": "application/json", // ƒê·∫∑t lo·∫°i n·ªôi dung l√† JSON
                "XSRF-TOKEN": csrfToken // Th√™m token v√†o header
            },
            body: JSON.stringify({
                tableId: numberTableId,
                orderId: numberOrderId,
                statusTable: "ƒê√£ ho√†n th√†nh" // S·ª≠a d·∫•u ch·∫•m ph·∫©y th√†nh d·∫•u hai ch·∫•m
            })
        })
            .then(response => {
                // Ki·ªÉm tra ph·∫£n h·ªìi t·ª´ server
                if (response.ok) {
                    alert(`ƒê√£ ho√†n th√†nh ƒë∆°n h√†ng ${numberOrderId}!`);
                    location.reload();
                } else {
                    alert("C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.");
                }
            })
            .catch(error => {
                console.error("Vui l√≤ng th·ª≠ l·∫°i:", error);
                alert("C√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i.");
            });
    }

    // M·ªü modal xem th√¥ng tin ƒë∆°n h√†ng
    function openOrderInfoModal() {
        document.getElementById("orderInfoModal").style.display = "block";
    }

    // ƒê√≥ng modal xem th√¥ng tin ƒë∆°n h√†ng
    function closeOrderInfoModal() {
        document.getElementById("orderInfoModal").style.display = "none";
    }
</script>
